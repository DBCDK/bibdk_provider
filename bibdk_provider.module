<?php
require_once('bibdk_provider.user.inc');
require_once('BibdkClientClass.php');

/**
 * Impelements hook_menu
 */

function bibdk_provider_menu() {
  $items['user/create_login'] = 
    array(
	  'page callback' => 'bibdk_provider_get_drupal_user_form',
	  'access callback' => TRUE, // @TODO is this correct??
	  );
    return $items;
}

function bibdk_provider_get_drupal_user_form() {
  return drupal_get_form('user_register_form');
  }

/**
 * Implements hook_user_presave
 */
/*function bibdk_provider_user_presave(&$edit, $account, $category) {
  dpm(func_get_args());
  }*/

function bibdk_provider_form_user_register_form_alter( &$form, &$form_state) {
   $form['account']['name'] = array(
    '#access' => FALSE
    );

   // we use mail for username - easy fix.. alter title for mail field to username
  $form['account']['mail']['#title'] = t('Username');
   // add submit function to START of the array
  array_unshift($form['#submit'], 'bibdk_provider_form_user_register_form_submit');

  // password part is commented out till we find out if it's okay

  /* $form['account']['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => '',
    '#access' => '1',
    '#weight' => '10',
    '#required' => 1,
    );*/
 
  /* $form['account']['confirm_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm password'),
    '#default_value' => '',
    '#access' => '1',
    '#weight' => '11',
    '#required' => 1,
    );*/
    // custom validator @TODO ; do we need this?
  $form['#validate'][] = 'bibdk_provider_user_register_form_validate';
}

/*
 * Implements hook_form_FORM_ID_alter ('user_register_form')
 * set name = email - we use email for username
 */
function bibdk_provider_form_user_register_form_submit( $form, &$form_state ) {
  $form_state['values']['name'] = $form_state['values']['mail'];
}


/**
 * Implements hook_form_FORM_ID_alter (user_profile_form)
 * catch username and password (not encrypted) and save them using ding_user_creds_save
 */
function bibdk_provider_form_user_profile_form_alter(&$form, &$form_state) {
  dpm(func_get_args());
  array_unshift($form['#submit'], 'bibdk_provider_user_profile_form_save_creds');
}

/**
 * custom method. create or update bibdk account
 * check if name and pass are set on user_profile_form
 * verify if user exists on bibdk
 * create if user does not exist
 * update if user exists
 */
function bibdk_provider_user_profile_form_save_creds( $form, &$form_state ) {  
  if( !empty( $form_state['values']['name']) && !empty($form_state['values']['pass'])) {
    $creds['name'] = $form_state['values']['name'];
    $creds['pass'] = $form_state['values']['pass'];

    /*  $creds['user'] = 
	array(
	'data' => 
	array('display_name' => 'HEST',),
	); */

    $hest['creds'] = $creds;
    // save credentials in plain text for later use
    ding_user_save_creds($hest,$form['#user']);
    // bibdk-part -  check if user exists
    if( !bibdk_provider_user_verify($form_state['values']['mail'] ) ) {
      // user does not exist - create
      bibdk_provider_user_create($creds['name'], $creds['pass'] );
    }
    else {
      if( ! bibdk_provider_user_update_password( $creds['name'], $creds['pass'] ) ) {
	drupal_set_message(t('Bibliotek.dk password was not saved. You can log on the site with your password, but library specific settings will not be available'));			   
      }	   
    }
  }
}


/**
 * Implements hook_mail_alter
 */
function bibdk_provider_mail_alter(&$message) {
  // dpm($message);
}

/**
 * Implements hook_mail
 */
function bibdk_provider_mail($key, &$message, $params) {
}

/**
 * Implements hook_form_FORM_ID_alter
 * delete user account.
 */
function bibdk_provider_user_cancel_confirm_form_alter( &$form, &$form_state) {
  // @TODO implement
}

/**
 * Implements hook_form_FORM_ID_alter ('user_pass')
 * add custom validate function 
 */
function bibdk_provider_form_user_pass_alter( &$form, &$form_state ) {
  if( isset($form_state['input']['name']) ) {
    $form_state['input']['mail'] = $form_state['input']['name'];
  }  
  array_unshift( $form['#validate'], '_bibdk_provider_user_pass_validate');
}
/**
 * custom validator for user_pass (change password)
 * check if user exists on drupal if not create a temporary user 
 * for drupal to have an email to confirm against
 */
function _bibdk_provider_user_pass_validate( &$form, &$form_state ) {
  if( isset($form_state['values']['name']) ) {
    $form_state['values']['mail'] = $form_state['input']['name'];
  }

  $mail =  isset($form_state['values']['mail']) ? $form_state['values']['mail'] : FALSE;

  if( $mail ) {  
    $drupal_ok = user_load_by_mail($mail);
    $bib_ok = bibdk_provider_user_verify( $mail );
    
    if( $bib_ok && !$drupal_ok ) {    
      // remove standard drupal error-message
      drupal_get_messages( 'error' );  
      // create a drupal user here, for drupal to have an email-address to confirm against 
      _bibdk_provider_create_random_user( $mail );
    }
  }  
}


/**
 * custom validator for user_register_form
 * calls bibdk_user ( bibdk_provider_user_verify ) to see if user exists
 * check if a drupal user is registred with given mail
 */
function bibdk_provider_user_register_form_validate( &$form,&$form_state ) {
  $mail =  $form_state['values']['mail'];
  if( !$mail ) {
    form_error($form['account']['mail'], t('No email'));
  }
  $drupal_ok = user_load_by_mail($mail);
  $bib_ok = bibdk_provider_user_verify( $mail );
    
  // users registred in bibdk but not in drupal
   if( $bib_ok && !$drupal_ok ) {    
    // remove drupal error-messages
    drupal_get_messages( 'error' );
    // set custom message
    _bibdk_provider_set_confirm_message($form_state);
    // stop form submit
    form_set_error( 'submit ');
  }
  // other cases are handled drupal standard way
}

/*
 * custom method
 * create a drupal user to have an email to confirm against
 */
function _bibdk_provider_create_random_user( $mail ) {
  $userinfo = array(
      'name' => $mail,
      'init' => $mail,
      'mail' => $mail,
      'pass' => 'hest',
      'status' => 1
    );

    $account = user_save('', $userinfo);

    if (!$account) {
      drupal_set_message('Error saving user','error');
    }
}

/**
 * custom method
 * drupal message to display for already registred users
 * @TODO theming here?? maybe overlay??
 */
function _bibdk_provider_set_confirm_message($form_state) {
   // set a custom error-message
  drupal_set_message( _bibdk_provider_already_registred_message( $form_state['values']['mail'] ) );
}

/**
 * custom method
 * set a message to display if user is already registred in bibdk
 */
function _bibdk_provider_already_registred_message( $email ) {
  $message = t('You are already a registred user. Please log in with your usual username and password. ');
  $message .= l(t('Have you forgotten your password?'),'user/password');
  return $message;
}

/**
 * Implement hook_ding_provider().
 */
function bibdk_provider_ding_provider() {
  return array(
    'title' => 'Bibliotek.dk provider',
    'settings' => 'bibdk_provider_settings_form',
    'provides' => array(
	'user' => array(
        'prefix' => 'user',
        'file' => drupal_get_path('module', 'bibdk_provider') . '/bibdk_provider.user.inc',
      ),
	/*      'availability' => array(
        'prefix' => 'availability',
        'file' => drupal_get_path('module', 'bibdk_provider') . '/bibdk_provider.availability.inc',
      ),
      
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => drupal_get_path('module', 'bibdk_provider') . '/bibdk_provider.reservation.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => drupal_get_path('module', 'bibdk_provider') . '/bibdk_provider.loan.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => drupal_get_path('module', 'bibdk_provider') . '/bibdk_provider.debt.inc',
	),*/
    ),
  );
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function bibdk_provider_settings_form() {
  $form['bibdk_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bibdk provider service settings'),
    '#tree' => FALSE,
  );

  $form['bibdk_provider']['bibdk_provider_wsdl_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Bibdk provider WSDL URL'),
    '#description' => t('The WSDL URL for Bibdk provider SOAP service, usually something like http://
/bibdk_provider.addi.dk/1.0/bibdk_provider.wsdl'),
    '#required' => TRUE,
    '#default_value' => variable_get('bibdk_provider_wsdl_url', ''),
  );

  //no need for an agencyid
  /*  $form['bibdk_provider']['bibdk_provider_agency_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Agency Id'),
    '#default_value' => variable_get('bibdk_provider_agency_id', ''),
    '#description' => t('The Bibdk provider agency id of the library.'),
    );*/

  $form['bibdk_provider']['bibdk_provider_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('bibdk_provider_enable_logging', FALSE),
    '#description' => t('Logs requests to the Bibdk provider webservice. Sensitive information such 
as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}
