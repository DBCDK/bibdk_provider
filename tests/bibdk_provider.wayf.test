<?php

class BibdkProviderWAYFTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'bibdk provider wayf test',
      'description' => 'Test bibdk provider wayf functionality.',
      'group' => 'Bibliotek.dk - Provider',
    );
  }

  function setUp() {
    
    module_enable(array('bibdk_test_provider'));
    menu_rebuild();
    
    parent::setup(array('bibdk_test_provider', 'ding_user', 'ding_wayf', 'wayf_test_gateway'));
   // variable_set('bibdk_provider_webservice_url', 'http://guesstimate.dbc.dk/~pjo/webservices/OpenUserInfo/trunk/server.php'); 
    variable_set('bibdk_provider_security_code', 'testhest');
    variable_set('user_register', USER_REGISTER_VISITORS);
  }

  public function testRunner() {
    BibdkUser::instance()->delete('dummy@dbc.dk');
    $this->testWayfNotActivated();
    $this->setupConfiguration();
    $this->testWayfIsActivated();
    $this->testflowThroughGateway();
    $this->validateNewUser();
    $this->testExcistingUser();
    $this->testConfirmWayfLink();

    $this->cleanup();

  }


  private function testflowThroughGateway() {
    $this->drupalGet('wayf/login', array(
      'query' => array(
        'idp' => 'nemlogin',
        'destination' => 'user/login,'
      )));
    $this->assertUrl($this->getAbsoluteUrl('wayf/gateway') . '?returnUrl=' . $this->getAbsoluteUrl('/') . 'wayf/login&idp=nemlogin', array(), t('User is redirected to gateway'));
    $this->drupalPost(null, array(), 'accept');

    // check if acceptpage is ok
    $this->assertUrl('wayf/accept');
    $this->assertText(t('You have been authenticated by wayf, but you either have no account or has not yet accepted wayfbinding'));
    $this->assertField('accept');
    $this->assertField('mail');
    // no fields set
    $this->drupalPost(null, array(), 'Update/create account');
    $this->assertText(t('You must accept binding your bibliotek.dk username with wayf id'));

    // Accept is set. Mail not set
    $edit['accept'] = TRUE;
    $edit['mail'] = '';
    $this->drupalPost(null, $edit, 'Update/create account');
    $this->assertText(t('Username field is required.'));

    // Accept is set. Mail invalid
    $edit['mail'] = 'test@dbc';
    $this->drupalPost(null, $edit, 'Update/create account');
    $this->assertNoText(t('Username field is required.'));
    $this->assertText(t('You need to provide a valid email address'));
    //$this->assertText(t('The e-mail address !mail is not valid.', array('!mail' => $edit['mail'])));

    // Accept is set. Mail invalid
    $edit['mail'] = 'dummy@dbc.dk';
    $this->drupalPost(null, $edit, 'Update/create account');
    $this->assertNoText(t('Username field is required.'));
    $this->assertNoText(t('You need to provide a valid email address'));
    $this->assertText(t('A welcome message with further instructions has been sent to your e-mail address.'), t('new account have been created'));
    $this->assertUrl('<front>');

    $mails = $this->drupalGetMails();

    // test user have been created
    $users = user_load_multiple(array(), array('mail' => 'dummy@dbc.dk', 'status' => '1'));
    $this->assertTrue(count($users) == 1, 'non validated user have been created');
  }

  private function testWayfNotActivated() {
    $this->drupalGet('user/login');
    $this->assertNoText('Login using NEMLOGIN');
    $this->assertNoText('Login using WAYF');
  }

  private function testWayfIsActivated() {
    $this->drupalGet('user/login');
    $this->assertLinkByHref('wayf/login', 0, t('Nemlogin found'));
    $this->assertLinkByHref('wayf/login', 1, t('wayf found'));
    //$this->assertText('Login using NEMLOGIN');
    //$this->assertText('Login using WAYF');
  }

  private function validateNewUser() {
    module_load_include('user.inc', 'bibdk_provider');
    // Get reset link
    $this->assertFalse(bibdk_provider_user_verify('dummy@dbc.dk'));
    $users = user_load_multiple(array(), array('mail' => 'dummy@dbc.dk'));
    $account = reset($users);
    $timestamp = REQUEST_TIME;
    $url = url("user/reset/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
    $this->drupalGet($url);
    // validate user
    $this->drupalPost(NULL, NULL, t('Log in'));
    $edit['pass[pass1]'] = 'testpass';
    $edit['pass[pass2]'] = 'testpass';
    $this->drupalPost(null, $edit, 'Save');

    $this->drupalLogout();

    // delete fake account
    user_delete(3);

  }

  private function  testExcistingUser() {
    //test existing user
    $this->drupalGet('wayf/login', array(
      'query' => array(
        'idp' => 'nemlogin',
        'destination' => 'user/login,'
      )));
    $this->assertUrl($this->getAbsoluteUrl('wayf/gateway') . '?returnUrl=' . $this->getAbsoluteUrl('/') . 'wayf/login&idp=nemlogin', array(), t('User is redirected to gateway'));

    // At the moment bibdk_provider does not redirect properly without the bibdk_frontend module
    $this->drupalPost(null, array(), 'accept');

    // test if we are logged in
    $this->drupalGet('');
    $this->assertLink(t('My account'));
    $this->assertLink(t('Log out'));
    $this->clickLink('Log out');
  }

  private function testConfirmWayfLink() {
    module_load_include('wayf.inc', 'bibdk_provider');
    // delete wayf binding
    bibdk_provider_wayf_delete('dummy@dbc.dk');

    // login with nemlogin
    $this->drupalGet('wayf/login', array(
      'query' => array(
        'idp' => 'nemlogin',
        'destination' => 'user/login,'
      )));
    $this->assertUrl($this->getAbsoluteUrl('wayf/gateway') . '?returnUrl=' . $this->getAbsoluteUrl('/') . 'wayf/login&idp=nemlogin', array(), t('User is redirected to gateway'));
    $this->drupalPost(null, array(), 'accept');
    // Test we end up at the right url
    $this->assertUrl('wayf/accept');
    // Accept
    $edit['accept'] = TRUE;
    $edit['mail'] = 'dummy@dbc.dk';
    $this->drupalPost(null, $edit, 'Update/create account');

    // Mail have been send
    $this->assertText(t('Confirmation mail have been sent'));

    $mails = $this->verboseEmail();
    $this->assertMail('subject', t('confirm wayf binding for dummy@dbc.dk at Drupal'));
    $this->assertMail('to', 'dummy@dbc.dk');
    $this->assertMail('id', 'bibdk_provider_wayf_confirm_user');
    // generate confirm - link
    $users = user_load_multiple(array(), array('mail' => 'dummy@dbc.dk', 'status' => '1'));
    $account = reset($users);
    $timestamp = REQUEST_TIME;

    // Validate account
    $url = url("user/wayf/$account->uid/confirm/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
    $this->drupalGet($url);
    $this->drupalPost(null, array(), t('Log in'));
    $this->assertLink(t('My account'), 0, t('user have been logged in'));

    // log out
    $this->clickLink(t('Log out'));
    $this->assertText(t('User login'), t('user is logged out'));

  }


  private function setupConfiguration() {
    $securepages = array();
    $ding_wayf = array(
      'ding_wayf[installdir]' => drupal_get_path('module', 'ding_wayf'),
      'ding_wayf[redirect]' => 'user',
      'ding_wayf[wayflogin]' => 1,
      'ding_wayf[nemlogin]' => 1,
      'ding_wayf[gatewayf]' => $this->getAbsoluteUrl('wayf/gateway'),
    );
    $account = $this->drupalCreateUser(array('administer site configuration', 'configure wayf'));
    $this->drupalLogin($account);
    $this->drupalPost('admin/config/system/securepages', $securepages, t('Save configuration'));
    $this->drupalPost('admin/config/ding/wayf', $ding_wayf, t('Save configuration'));
    $this->drupalLogout();

  }

  private function cleanup(){

  }

  private function _createProviderUser() {
    $name = 'good_user';
    $pass = 'pass';
    db_insert('authmap')
      ->fields(array(
        'uid' => 2,
        'module' => 'ding_user',
        'authname' => $name
      ))->execute();

    $user = new stdClass();
    $user->uid = 2;
    $user->name = $name;
    ding_user_save_creds(array('creds' => array(
      'name' => $name,
      'pass' => $pass,
    )), $user);
    return $user;
  }

  private function _removeProviderUser() {
    $name = 'good_user';
    db_delete('authmap')
      ->condition('authname', $name)
      ->execute();
  }

}

